#Tackpack
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class BackpackPlugin extends JavaPlugin implements Listener, CommandExecutor {

    private Connection connection;
    private String host, database, username, password;
    private int port;

    private int guiSize;
    private int adminBackpackSize;
    private int maxBackpacks;
    private String chatMessage;
    private Map<UUID, Integer> backpackCount = new HashMap<>();
    private Map<UUID, Inventory> playerBackpacks = new HashMap<>();
    private File dataFile;

    @Override
    public void onEnable() {
        Bukkit.getPluginManager().registerEvents(this, this);
        getCommand("b").setExecutor(this);
        getCommand("backpack").setExecutor(this);
        getCommand("tackpack").setExecutor(this);
        getCommand("backpackreload").setExecutor(this);
        getCommand("tackpackreload").setExecutor(this);
        getCommand("openplayerbackpack").setExecutor(this);
        getCommand("opbp").setExecutor(this);
        getCommand("backpackhelp").setExecutor(this);
        loadConfig();
        setupDatabase();
        registerCraftingRecipe();

        getCommand("backpackreload").setExecutor((sender, cmd, label, args) -> {
            if (sender.hasPermission("tackpack.reloadconfig")) {
                loadConfig();
                sender.sendMessage("tackpack erfolgreich neu geladen!");
            } else {
                sender.sendMessage("Du hast keine Berechtigung.");
            }
            return true;
        });

        Bukkit.getConsoleSender().sendMessage("[BackpackPlugin] Das Plugin wurde aktiviert!");
    }

    private void setupDatabase() {
        try {
            synchronized (this) {
                if (getConnection() != null && !getConnection().isClosed()) {
                    return;
                }
                Class.forName("com.mysql.jdbc.Driver");
                setConnection(DriverManager.getConnection("jdbc:mysql://" + host + ":" + port + "/" + database, username, password));
                Bukkit.getConsoleSender().sendMessage("[BackpackPlugin] Verbindung zur MySQL-Datenbank hergestellt!");
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    private Connection getConnection() {
        return connection;
    }

    private void setConnection(Connection connection) {
        this.connection = connection;
    }

    private void loadConfig() {
        getConfig().options().copyDefaults(true);
        saveConfig();

        // MySQL-Anmeldeinformationen aus der Konfigurationsdatei laden
        host = getConfig().getString("mysql.host");
        port = getConfig().getInt("mysql.port");
        database = getConfig().getString("mysql.database");
        username = getConfig().getString("mysql.username");
        password = getConfig().getString("mysql.password");

        // Plugin-Einstellungen laden
        guiSize = getConfig().getInt("settings.guiSize");
        adminBackpackSize = getConfig().getInt("settings.adminBackpackSize");
        maxBackpacks = getConfig().getInt("settings.maxBackpacks");
        chatMessage = getConfig().getString("settings.chatMessage");
    }

    private void registerCraftingRecipe() {
        ItemStack backpackItem = new ItemStack(Material.CHEST);
        ShapedRecipe backpackRecipe = new ShapedRecipe(backpackItem);
        backpackRecipe.shape("SSS", "SCS", "SSS");
        backpackRecipe.setIngredient('S', Material.STICK);
        backpackRecipe.setIngredient('C', Material.CHEST);
        Bukkit.addRecipe(backpackRecipe);
    }

    @Override
    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
        if (cmd.getName().equalsIgnoreCase("b") || cmd.getName().equalsIgnoreCase("backpack") || cmd.getName().equalsIgnoreCase("tackpack")) {
            if (sender instanceof Player) {
                Player player = (Player) sender;
                openBackpack(player);
            } else {
                sender.sendMessage("Dieser Befehl kann nur von Spielern ausgeführt werden.");
            }
            return true;
        } else if (cmd.getName().equalsIgnoreCase("openplayerbackpack") || cmd.getName().equalsIgnoreCase("opbp")) {
            if (args.length == 1) {
                openOtherPlayerBackpack(sender, args[0]);
            } else {
                sender.sendMessage("Verwendung: /openplayerbackpack <Spielername>");
            }
            return true;
        } else if (cmd.getName().equalsIgnoreCase("backpackreload") || cmd.getName().equalsIgnoreCase("tackpackreload")) {
            reloadConfig(sender);
            return true;
        } else if (cmd.getName().equalsIgnoreCase("backpackhelp") || cmd.getName().equalsIgnoreCase("backpack help")) {
            sendHelpMessage(sender);
            return true;
        }
        return false;
    }

    private void openBackpack(Player player) {
        Inventory backpackInventory = playerBackpacks.computeIfAbsent(player.getUniqueId(), uuid -> Bukkit.createInventory(null, guiSize, "Backpack"));
        player.openInventory(backpackInventory);
    }

    private boolean openOtherPlayerBackpack(CommandSender sender, String playerName) {
        if (sender instanceof Player) {
            Player admin = (Player) sender;
            Player targetPlayer = Bukkit.getPlayer(playerName);

            if (targetPlayer != null) {
                Inventory targetBackpack = playerBackpacks.computeIfAbsent(targetPlayer.getUniqueId(), uuid -> Bukkit.createInventory(null, guiSize, "Backpack"));
                admin.open
                admin.openInventory(targetBackpack);
                admin.sendMessage("Du hast das Backpack von " + targetPlayer.getName() + " geöffnet.");
                return true;
            } else {
                sender.sendMessage("Spieler nicht gefunden.");
            }
        } else {
            sender.sendMessage("Dieser Befehl kann nur von Spielern ausgeführt werden.");
        }
        return false;
    }

    private boolean reloadConfig(CommandSender sender) {
        if (sender.hasPermission("tackpack.reloadconfig")) {
            loadConfig();
            sender.sendMessage("[Tackpack] erfolgreich neu geladen!");
            return true;
        } else {
            sender.sendMessage("[Tackpack]Du hast keine Berechtigung.");
            return false;
        }
    }

    private void sendHelpMessage(CommandSender sender) {
        sender.sendMessage("=== TackPack Hilfe ===");
        sender.sendMessage("Plugin erstellt von TheTobicraft11 /Tobias.");
        sender.sendMessage("/b, /backpack,  - Öffnet dein Backpack.");
        sender.sendMessage(".                                               ");
        sender.sendMessage("/backpack help - Zeigt diese Hilfe an.");
        sender.sendMessage("PLugin by Tobias")
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        loadPlayerDataFromDatabase(player);
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        Player player = (Player) event.getWhoClicked();
        if (event.getInventory().getName().equals("Backpack")) {
            event.setCancelled(true); // Um das Verschieben von Items im Backpack zu verhindern
        }
    }

    private void loadPlayerDataFromDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM backpack_data WHERE player_uuid = ?");
            statement.setString(1, player.getUniqueId().toString());
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                String backpackData = resultSet.getString("backpack_data");
                Inventory backpack = deserializeInventory(backpackData);
                playerBackpacks.put(player.getUniqueId(), backpack);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void savePlayerDataToDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("REPLACE INTO backpack_data (player_uuid, backpack_data) VALUES (?, ?)");
            statement.setString(1, player.getUniqueId().toString());
            statement.setString(2, serializeInventory(playerBackpacks.get(player.getUniqueId())));
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String serializeInventory(Inventory inventory) {
        StringBuilder serializedData = new StringBuilder();

        for (ItemStack itemStack : inventory.getContents()) {
            if (itemStack != null && itemStack.getType() != Material.AIR) {
                serializedData.append(itemStack.getType().name()).append(":").append(itemStack.getAmount()).append(",");
            }
        }

        return serializedData.toString();
    }

    private Inventory deserializeInventory(String serializedInventory) {
        Inventory inventory = Bukkit.createInventory(null, guiSize, "Backpack");

        if (serializedInventory != null && !serializedInventory.isEmpty()) {
            String[] itemData = serializedInventory.split(",");
            for (String data : itemData) {
                String[] parts = data.split(":");
                ItemStack itemStack = new ItemStack(Material.valueOf(parts[0]));
                itemStack.setAmount(Integer.parseInt(parts[1]));
                inventory.addItem(itemStack);
            }
        }

        return inventory;
    }
}
    // ... (vorheriger Code)

    private void registerCraftingRecipe() {
        ItemStack backpackItem = new ItemStack(Material.CHEST);
        ShapedRecipe backpackRecipe = new ShapedRecipe(backpackItem);
        backpackRecipe.shape("SSS", "SCS", "SSS");
        backpackRecipe.setIngredient('S', Material.STICK);
        backpackRecipe.setIngredient('C', Material.CHEST);
        Bukkit.addRecipe(backpackRecipe);
    }

    @Override
    public void onDisable() {
        // Speichere alle Daten in der Datenbank, bevor das Plugin deaktiviert wird
        for (Player player : Bukkit.getOnlinePlayers()) {
            savePlayerDataToDatabase(player);
        }

        Bukkit.getConsoleSender().sendMessage("[BackpackPlugin] Das Plugin wurde deaktiviert!");
    }

    // ... (weitere Event-Handler und Methoden)

    // Implementiere die Funktionen für den Befehl /b, /backpack, /tackpack hier
    private void openBackpack(Player player) {
        Inventory backpackInventory = playerBackpacks.computeIfAbsent(player.getUniqueId(), uuid -> Bukkit.createInventory(null, guiSize, "Backpack"));
        player.openInventory(backpackInventory);
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        loadPlayerDataFromDatabase(player);
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        Player player = (Player) event.getWhoClicked();
        if (event.getInventory().getName().equals("Backpack")) {
            event.setCancelled(true); // Um das Verschieben von Items im Backpack zu verhindern
        }
    }

    private void loadPlayerDataFromDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM backpack_data WHERE player_uuid = ?");
            statement.setString(1, player.getUniqueId().toString());
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                String backpackData = resultSet.getString("backpack_data");
                Inventory backpack = deserializeInventory(backpackData);
                playerBackpacks.put(player.getUniqueId(), backpack);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void savePlayerDataToDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("REPLACE INTO backpack_data (player_uuid, backpack_data) VALUES (?, ?)");
            statement.setString(1, player.getUniqueId().toString());
            statement.setString(2, serializeInventory(playerBackpacks.get(player.getUniqueId())));
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String serializeInventory(Inventory inventory) {
        StringBuilder serializedData = new StringBuilder();

        for (ItemStack itemStack : inventory.getContents()) {
            if (itemStack != null && itemStack.getType() != Material.AIR) {
                serializedData.append(itemStack.getType().name()).append(":").append(itemStack.getAmount()).append(",");
            }
        }

        return serializedData.toString();
    }

    private Inventory deserializeInventory(String serializedInventory) {
        Inventory inventory = Bukkit.createInventory(null, guiSize, "Backpack");

        if (serializedInventory != null && !serializedInventory.isEmpty()) {
            String[] itemData = serializedInventory.split(",");
            for (String data : itemData) {
                String[] parts = data.split(":");
                ItemStack itemStack = new ItemStack(Material.valueOf(parts[0]));
                itemStack.setAmount(Integer.parseInt(parts[1]));
                inventory.addItem(itemStack);
            }
        }

        return inventory;
    }
}
    // ... (vorheriger Code)

    @Override
    public void onDisable() {
        // Speichere alle Daten in der Datenbank, bevor das Plugin deaktiviert wird
        for (Player player : Bukkit.getOnlinePlayers()) {
            savePlayerDataToDatabase(player);
        }

        Bukkit.getConsoleSender().sendMessage("[BackpackPlugin] Das Plugin wurde deaktiviert!");
    }

    // ... (weitere Event-Handler und Methoden)

    // Implementiere die Funktionen für den Befehl /b, /backpack, /tackpack hier
    private void openBackpack(Player player) {
        Inventory backpackInventory = playerBackpacks.computeIfAbsent(player.getUniqueId(), uuid -> Bukkit.createInventory(null, guiSize, "Backpack"));
        player.openInventory(backpackInventory);
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        loadPlayerDataFromDatabase(player);
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        Player player = (Player) event.getWhoClicked();
        if (event.getInventory().getName().equals("Backpack")) {
            event.setCancelled(true); // Um das Verschieben von Items im Backpack zu verhindern
        }
    }

    private void loadPlayerDataFromDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM backpack_data WHERE player_uuid = ?");
            statement.setString(1, player.getUniqueId().toString());
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                String backpackData = resultSet.getString("backpack_data");
                Inventory backpack = deserializeInventory(backpackData);
                playerBackpacks.put(player.getUniqueId(), backpack);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void savePlayerDataToDatabase(Player player) {
        try {
            PreparedStatement statement = getConnection().prepareStatement("REPLACE INTO backpack_data (player_uuid, backpack_data) VALUES (?, ?)");
            statement.setString(1, player.getUniqueId().toString());
            statement.setString(2, serializeInventory(playerBackpacks.get(player.getUniqueId())));
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String serializeInventory(Inventory inventory) {
        StringBuilder serializedData = new StringBuilder();

        for (ItemStack itemStack : inventory.getContents()) {
            if (itemStack != null && itemStack.getType() != Material.AIR) {
                serializedData.append(itemStack.getType().name()).append(":").append(itemStack.getAmount()).append(",");
            }
        }

        return serializedData.toString();
    }

    private Inventory deserializeInventory(String serializedInventory) {
        Inventory inventory = Bukkit.createInventory(null, guiSize, "Backpack");

        if (serializedInventory != null && !serializedInventory.isEmpty()) {
            String[] itemData = serializedInventory.split(",");
            for (String data : itemData) {
                String[] parts = data.split(":");
                ItemStack itemStack = new ItemStack(Material.valueOf(parts[0]));
                itemStack.setAmount(Integer.parseInt(parts[1]));
                inventory.addItem(itemStack);
            }
        }

        return inventory;
    }
}
#
